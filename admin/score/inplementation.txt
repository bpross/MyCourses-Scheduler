Implementation
Implemention of the MyCourses scheduling system was a multifacted problem. The overall system was broken down into four main parts to implement: Web Interface, Database, Algorithm, and Security. Our implementation strategy was to find the best ways to implement the parts seperatly, and then integrate them together. This allowed us to be selective for each of the parts of the system.

The implementation of the Web Interface is done in HTML 5, with a Django Server backend. HTML 5 was selected over previous versions of the markup language, because it allows development with less Javascript and Flash. Eventhough these technologies are very popular on the Internet, staying away from them allows us to increase the browser compatability of our system. As newer browsers are released, HTML 5 support is increasing, which will allow us to use new features of the language to add new features to the system as the client desires. 

The Django Server backend was selected for a few reasons. Django is a free Web Server backend that allows easy control of databases, and pythonic ways to display information on web pages. This allowed us to integrate the algorithm with the database seemlessly. This was one of the major problems facing our system, but was quickly alliviated early in the process. Django uses forms and templates to display information from the database to web pages. This allowed us to create a few templates for each of the authentication levels, all of which are able to display information directly from the database with no SQL queries. Because Django performs the CRUD on the database, python queries are performed very fast, letting pages load very fast.

The Algorithm went through three different implementations before the best implementation was selected. The first implementation was a slow algorithm designed by one the team members. It was very inefficient, but allowed the program administrator complete history of the courses that were scheduled at a given time, in a given room. This allowed for easy manual edits of the proposed schedule. The second implementation was using a FLOSS contraint solver Minion. This solution was very fast, but needed a complicated script to translate from the database to the solver and back again. The third implementation was a scheduling algorithm using genetic algorithms. This algorithm was based off of a freeware genetic algorithm scheduler. The algorithm was written in python allowing it to be fast, and to be easily modified. The genetic algorithm was selected as the best implementation solution, because it allowed seemless integration with the database, and it is fast, even for large solutions.

Security for our system was not something that came up in our intial discussions of the system. However, security is one of the most important aspects of a web application. Also, Universities generally have lots of sensitive data displayed on similar applications, so security needs to be paramount. The security system we designed into our system also integrates with the privacy settings for the application. HTTPS is used instead of the HTTP; this allows all traffic coming to and from the system to be encrypted. This is a step above popular web applications like Facebook, and Myspace which will allow students, faculty and administrators the piece of mind knowing their traffic will be very difficult to decrypt. Our second important security feature are passwords. Our minimum password length is 8, with a minimum of one capital letter, one symbol, and one letter. This allows users increased security from brute force password attacks. Another security feature involving passwords is similar to what some banks do. We assign each user a sitekey, which is a random picture out of 50. The user is then asked to name the sitekey. When the user goes to enter their password, if an incorrect sitekey is displayed, the user is made aware of an attempt to compromise their information. 

The other security features deal with the privacy of the user once they are in the system. These features are designed for the student role only. The integration of Facebook with our system provided another way for our system to lose security. When the student first logs into the system, a tutorial walks them through setting up their account and linking it with their Facebook. The student has the option to turn off sharing of information during this setup, and also anytime through the account settings page. This feature allows students complete access to what information they share through our system, and through Facebook. Allowing students this control will decrease the chances of a student sharing more information then they actually want.